#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

//bit suboptimal but works for an example
layout(local_size_x = 4, local_size_y = 4) in;

//So the struct gonna be a bit weird since vec3 is aligned as vec4
//but we have them stored compact
struct Vertex {
    float posX;
    float posY;
    float posZ;
    float nomX;
    float nomY;
    float nomZ;
};

layout(binding = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1) readonly buffer inVertex { Vertex vertices[]; };
layout(binding = 2) readonly buffer inInstance { uint instances[]; };
layout(binding = 3, rgba8) uniform image2D outImage;

void main() {
    //Get info about this invocation
    vec2 size = vec2(imageSize(outImage));
    vec2 pos = vec2(gl_GlobalInvocationID.xy);
    //map (width,height) to [-1,1]^2
    vec2 coord = pos / size * 2 - vec2(1.0, 1.0);

    //to things a bit more simple, we render orthogonal in y direction
    //image is in the xz plane; flip y as usual
    vec3 start = vec3(coord.x, -2.0, -coord.y);
    vec3 dir = vec3(0.0, 1.0, 0.0);

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(
        rayQuery, tlas,
        gl_RayFlagsTerminateOnFirstHitEXT,
        0xFF, start, 0.01, dir, 4.0);

    rayQueryProceedEXT(rayQuery);
    
    //we start with something simple black/white
    vec4 color;
    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
        //hit
        float t = rayQueryGetIntersectionTEXT(rayQuery, true);

        //reconstruct triangle
        int idx = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
        vec2 _bar = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
        vec3 bar = vec3(1.0 - _bar.x - _bar.y, _bar.x, _bar.y);
        //get instances
        uint i0 = instances[3 * idx + 0];
        uint i1 = instances[3 * idx + 1];
        uint i2 = instances[3 * idx + 2];
        //get vertices
        Vertex v0 = vertices[i0];
        Vertex v1 = vertices[i1];
        Vertex v2 = vertices[i2];
        //get normals
        vec3 n0 = vec3(v0.nomX, v0.nomY, v0.nomZ);
        vec3 n1 = vec3(v1.nomX, v1.nomY, v1.nomZ);
        vec3 n2 = vec3(v2.nomX, v2.nomY, v2.nomZ);
        //interpolate normal
        vec3 normal = n0 * bar.x + n1 * bar.y + n2 * bar.z;
        //normalize normal
        normal = (normal + 1) / 2;

        float v = (t - 1) / 2;
        color = vec4(normal, 1.0);
    }
    else {
        //miss
        color = vec4(1.0,1.0,1.0,1.0);
    }
    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), color);
}
