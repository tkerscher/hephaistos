#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require

//bit suboptimal but works for an example
layout(local_size_x = 4, local_size_y = 4) in;

layout(buffer_reference, scalar, buffer_reference_align=4) readonly buffer Vertex {
    vec3 position;
    vec3 normal;
};
// Indices of a triangle
layout(buffer_reference, scalar, buffer_reference_align=4) readonly buffer Index {
    ivec3 idx;
};

layout(binding = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, rgba8) uniform image2D outImage;

layout(push_constant) uniform Push{
    Vertex vertices;
    Index indices;
} push;

void main() {
    //Get info about this invocation
    vec2 size = vec2(imageSize(outImage));
    vec2 pos = vec2(gl_GlobalInvocationID.xy);
    //map (width,height) to [-1,1]^2
    vec2 coord = pos / size * 2 - vec2(1.0, 1.0);

    //to things a bit more simple, we render orthogonal in y direction
    //image is in the xz plane; flip y as usual
    vec3 start = vec3(coord.x, -2.0, -coord.y);
    vec3 dir = vec3(0.0, 1.0, 0.0);

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(
        rayQuery, tlas,
        gl_RayFlagsTerminateOnFirstHitEXT,
        0xFF, start, 0.01, dir, 4.0);
    rayQueryProceedEXT(rayQuery);
    
    //we start with something simple black/white
    vec4 color;
    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
        //hit
        float t = rayQueryGetIntersectionTEXT(rayQuery, true);

        //reconstruct triangle
        int idx = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
        vec2 _bar = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
        vec3 bar = vec3(1.0 - _bar.x - _bar.y, _bar.x, _bar.y);
        //get vertices
        ivec3 index = push.indices[idx].idx;
        Vertex v0 = push.vertices[index.x];
        Vertex v1 = push.vertices[index.y];
        Vertex v2 = push.vertices[index.z];
        //interpolate normal
        vec3 normal = v0.normal * bar.x + v1.normal * bar.y + v2.normal * bar.z;
        //normalize normal to (0,1)
        normal = (normal + 1) / 2;

        float v = (t - 1) / 2;
        color = vec4(normal, 1.0);
    }
    else {
        //miss
        color = vec4(1.0,1.0,1.0,1.0);
    }
    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), color);
}
